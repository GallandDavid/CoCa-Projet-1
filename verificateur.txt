
bool verificateur( square, solution){
    for(uint i = 0; i < get_nb_square_rows(); i++){
        for(uint j = 0; j < get_nb_square_cols(); j ++){
            switch(get_square(i,j)){
                case BLANK:
                    if(is_a_light(i,j)) return light_is_alone(i,j);
                    else return check_is_lighted(i, j);
                case LIGHTBULB:
                    break;
                case BLACK0:
                    return check_around(i,j,0));
                case BLACK1:
                    return check_around(i,j,1));
                case BLACK2:
                    return check_around(i,j,2));
                case BLACK3:
                    return check_around(i,j,3));
                case BLACK4:
                    return check_around(i,j,4));
                default:
                continue;
            }
        }
    }
    return true;
}

bool light_is_alone(i,j){
    for(uint x = i + 1; i < get_nb_square_rows(); i++){
        if(is_wall(get_square(x,j)) break;
        if(is_light(x,j)) return false;
    }
    for(uint y = j + 1; i < get_nb_square_cols(); j++){
        if(is_wall(get_square(i,y)) break;
        if(is_light(i,y)) return false;
    }
    for(uint x = i - 1; i >= 0; i--){
        if(is_wall(get_square(x,j)) break;
        if(is_light(x,j)) return false;
    }
    for(uint y = j - 1; i >= 0; j--){
        if(is_wall(get_square(i,y)) break;
        if(is_light(i,y)) return false;
    }
    return true;
}

bool is_a_light(i,j){
    return get_solution;
}

bool check_is_lighted(int i, int j){
    for(uint x = i + 1; i < get_nb_square_rows(); i++){
        if(is_wall(get_square(x,j)) break;
        if(is_light(x,j)) return true;
    }
    for(uint y = j + 1; i < get_nb_square_cols(); j++){
        if(is_wall(get_square(i,y)) break;
        if(is_light(i,y)) return true;
    }
    for(uint x = i - 1; i >= 0; i--){
        if(is_wall(get_square(x,j)) break;
        if(is_light(x,j)) return true;
    }
    for(uint y = j - 1; i >= 0; j--){
        if(is_wall(get_square(i,y)) break;
        if(is_light(i,y)) return true;
    }
    return false;
}

bool check_around(int row, int col, int nb_light){
    int lights = 0;
    if(row > 0) if(square[row - 1][col] == LIGHBULB) lights ++;
    if(row < get_nb_square_rows() - 1) if(square[row + 1][col] == LIGHBULB) lights ++;
    if(col > 0) if(square[row][col - 1] == LIGHBULB) lights ++;
    if(row < get_nb_square_cols() - 1) if(square[row][col + 1] == LIGHBULB) lights ++;
    return nb_light == lights;
}


O(verificateur()) O(n*m) + O(2*n + 2*m) + O(4) = O(nÂ³)
O(check_is_lighted()) (2*n + 2*m)
O(check_around()) (4)