bool hasSolution(square){
    solution = duplicateEmpty(square); //crée une matrice similaire à square mais totalement vide
    blank_cases = nbBlankCases(square); //compte le nombre totale de case vide et le retourne
    LPs[blank_cases];
    nb_pos = FindAllPositions(LPs); //Ensemble des position valide pour une lampe
    nb_lights = 1;
    while(nb_lights <= blank_cases){
        LPt[nb_lights];
        fillTab(LPt); // stock l'indice de nb_lights positions contenues dans LPs (de manière croissante et linéaire)
        fillSolutionWithTab(solution, LPt, LPs); //remplie la matrice solution en boolean avec le tableaux d'indice des positions
        if(verificateur(square,solution)) return true;
        while(nextTry(LPt, nb_light)){ //nextTry(...) choisit un nouveaux jeux de positions en commençant par la dernière, en choisissant les prochaine position (de manière croissante et linéaire), jusqu'à ne plus pouvoir et reprendre en déplaçant celle d'avant. retourn vrai si la fonction trouve un nouveaux jeux, faux si aucune nouvelle position n'est possible pour la première lampe choisit
            fillTab(LPt);
            fillSolutionWithTab(solution, LPt);
            if(verificateur(square,solution)) return true;
        }
        nb_lights ++;
    }
    return false;
}


***Amélioration
---------------
1. diagonal(que des suivant en position suivante)
2. 1 lampe mise = enlever de la liste les position invalide (s'arreter quand plus de position valide ne sont à prendre)
3. quand on à obtenue (dans une revue completes des solution pour un nb_lights fixé) que des solutions où des lampes se sont éclairé entre elles, arreter le programme;